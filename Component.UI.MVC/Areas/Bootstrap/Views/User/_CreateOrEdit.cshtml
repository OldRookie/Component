@using Component.UI.MVC.Core;
@using Component.ViewModel.WorkFlowViewMoels;
@using Component.Model.ViewModel;
@{
    ViewBag.Title = "新增或者编辑用户";
}
@model UserVM

<div class="modal fade form-modal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="productsettings-window-title">
                    新建修改
                </h4>
            </div>
            <div class="modal-body">
                <div class="validation-summary-valid" data-valmsg-summary="true" style="display:none">
                    <ul>
                        <li style="display:none"></li>
                    </ul>
                </div>
                <form class="action-form">
                    <div class="form-horizontal">
                        @Html.HiddenFor(x => x.Id)
                        <div class="row">
                            <div class="form-group form-group-sm col-sm-12">
                                <div class="col-sm-2">
                                    @Html.UILabelFor(x => x.Name)
                                </div>
                                <div class="col-sm-9">
                                    @Html.UIEditorFor(x => x.Name)
                                    @Html.ValidationMessageFor(x => x.Name)
                                </div>
                            </div>

                        </div>
                        <div class="row">
                            <div class="form-group form-group-sm col-sm-12">
                                <div class="col-sm-2">
                                    @Html.UILabelFor(x => x.EMail)
                                </div>
                                <div class="col-sm-9">
                                    @Html.UIEditorFor(x => x.EMail)
                                    @Html.ValidationMessageFor(x => x.EMail)
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group form-group-sm col-sm-12">
                                <div class="col-sm-2">
                                    @Html.UILabelFor(x => x.FullName)
                                </div>
                                <div class="col-sm-9">
                                    @Html.UIEditorFor(x => x.FullName)
                                    @Html.ValidationMessageFor(x => x.FullName)
                                </div>
                            </div>

                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <center>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary btn-ok">OK</button>
                    <button type="button" class="btn btn-primary btn-save-ui">Save UI</button>
                </center>
            </div>
        </div>
    </div>
</div>
<script>
    require(["jquery", "model.opt", "validate.unobtrusive", "app/module.user"], function ($, modelOpt) {
        var form = $(".form-modal form.action-form");
        var parseValidation = function () {
            form.removeData("validator");
            form.removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(form);
        }

        var url= '@Url.Action("Save")';
        $('.form-modal .btn-ok').click(function () {
            parseValidation();
            $("#FullName").rules('add', {
                userFullNameValidator: "userFullNameValidator"
            });
            var validator = form.data('validator');
            if (validator) {
                validator.settings.ignore = ".ignore";
                validator.cancelSubmit = true;
            }
            var validator = form.validate();
            if (form.valid()) {
                var data = form.serializeArray();
                $.postRequest(url, data, function (response) {
                    if (response.Code == 1) {
                        if (modelOpt != null) {
                            modelOpt.success(data);
                        }
                    }
                    else {
                        $.showInvalidError(response.ErrorMessages);
                    }
                });
            }
        });

        //debugger;
        var table = $.fn.dataTable
                        .tables({ visible: true, api: true });
        $('.form-modal .btn-save-ui').click(function () {
            form.validate();
            if (form.valid()) {
                var data = [];
                var item = form.serializeObject()
                data.push(item);
                var table = $.fn.dataTable
                    .tables({ visible: true, api: true });

                var isEditable = false;
                if (isEditable) {
                    var tableData = table.data();
                    table.clear();
                    for (var i = 0; i < tableData.length; i++) {
                        if (tableData[i].Id == item.Id) {
                            tableData[i] = item;
                        }
                    }
                    data = tableData;
                }

                table.rows.add(data).draw();
                $('.form-modal').modal('hide');
            }
        });
    });
</script>​