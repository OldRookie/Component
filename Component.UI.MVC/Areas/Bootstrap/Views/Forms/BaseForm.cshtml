@using Component.UI.MVC.Core;
@using Component.ViewModel.WorkFlowViewMoels;
@{
    ViewBag.Title = "BaseForm";
    var FormDetail = Model.FormDetail.ToDictionary(x => Guid.NewGuid(), y => y);
}
@model BaseFormVM


<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <div class="content-header clearfix">
        <h4 class="pull-left">
            @ViewBag.Title
        </h4>
        <div class="pull-right btn-group-sm">
            <button class="btn bg-blue btn-normal btn-sm btn-save">
                <i class="fa fa-plus-square"></i>
                保存
            </button>
        </div>
    </div>

    <!-- Main content -->
    <div class="content" style="padding-top:0px;">
        <div class="form-horizontal">
            <form id="applyForm">
                <div class="panel-group">
                    <div class="panel panel-success">
                        <div class="panel-heading">
                            表单信息
                        </div>
                        <div class="panel-body">
                            <div class="row">
                                <div class="form-group form-group-sm col-sm-4">
                                    <div class="col-sm-3">
                                        @Html.UILabelFor(x => x.Name)
                                    </div>
                                    <div class="col-sm-9">
                                        @Html.UIEditorFor(x => x.Name)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group form-group-sm col-sm-4">
                                    <div class="col-sm-3">
                                        @Html.UILabelFor(x => x.FormDateTime)
                                    </div>
                                    <div class="col-sm-9">
                                        @Html.UIEditorFor(x => x.FormDateTime)
                                        @Html.ValidationMessageFor(x => x.FormDateTime)
                                    </div>
                                </div>
                                <div class="form-group form-group-sm col-sm-4">
                                    <div class="col-sm-3">
                                        @Html.UILabelFor(x => x.Money)
                                    </div>
                                    <div class="col-sm-9">
                                        <div class="input-group">
                                            @Html.UIEditorFor(x => x.Money)
                                            <span class="input-group-addon">$</span>
                                        </div>
                                        @Html.ValidationMessageFor(x => x.Money)
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="panel panel-success">
                        <div class="panel-heading">
                            表单详情信息
                        </div>
                        <div class="panel-body item-container">
                            <div class="form-group form-group-sm" style="margin-left: 0;">
                                <button type="button" class="btn btn-new btn-primary btn-sm add-detail-item"><i class="fa fa-plus"></i></button>
                            </div>
                            @foreach (var item in Model.FormDetail)
                            {
                                @Html.Partial("_FormDetail", item)
                            }
                        </div>
                    </div>
                    @Html.Partial("_ListGroups")
                </div>
            </form>
        </div>
    </div>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->
<script>
    require(["jquery", "bootbox", "validate.unobtrusive"], function ($, bootbox) {
        var form = $('#applyForm');
        var formContainer = $('.form-container');
        var parseValidation = function () {
            form.removeData("validator");
            form.removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(form);
        }

        form.on('click', '.add-detail-item', function () {
            var container = $('.item-container');
            $.getRequest('@Url.Action("CreateOrUpdateFormDetailItem")', function (data) {
                container.append(data);
                parseValidation();
            });
        });

        form.on('click', '.close-item', function () {
            $(this).closest('.panel').remove();
        });

        $('.btn-save').click(function () {
            var validator = form.validate();
            if (!form.valid()) {
                return false;
            };

            $.postRequest('@Url.Action("SaveBaseForm")', form.serializeArray(), function () {

            });
        });
    })
</script>